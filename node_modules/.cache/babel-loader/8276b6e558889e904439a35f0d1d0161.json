{"ast":null,"code":"var _jsxFileName = \"/Users/gregoriiaaa/Desktop/blueprint/onboarding/custom-button/src/components/button/button.tsx\";\nimport React from \"react\";\nimport \"./button.css\"; // HINT: Use this in ButtonProps to determine how the button is styled\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let ButtonType; // HINT: Use this in ButtonProps to determine how the button text is styled\n\n(function (ButtonType) {\n  ButtonType[ButtonType[\"button-green\"] = 0] = \"button-green\";\n  ButtonType[ButtonType[\"button-white\"] = 1] = \"button-white\";\n  ButtonType[ButtonType[\"button-clear\"] = 2] = \"button-clear\";\n  ButtonType[ButtonType[\"button-clearAlt\"] = 3] = \"button-clearAlt\";\n})(ButtonType || (ButtonType = {}));\n\nexport let ButtonTextType;\n\n(function (ButtonTextType) {\n  ButtonTextType[ButtonTextType[\"button-text-white\"] = 0] = \"button-text-white\";\n  ButtonTextType[ButtonTextType[\"button-text-green\"] = 1] = \"button-text-green\";\n  ButtonTextType[ButtonTextType[\"button-text-grey\"] = 2] = \"button-text-grey\";\n})(ButtonTextType || (ButtonTextType = {}));\n\nconst Button = _ref => {\n  let {\n    text,\n    buttonType,\n    textType,\n    children,\n    onPress = () => {}\n  } = _ref;\n\n  const handleOnClick = e => {\n    onPress(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleOnClick,\n    id: buttonType,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      id: textType,\n      children: text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/gregoriiaaa/Desktop/blueprint/onboarding/custom-button/src/components/button/button.tsx"],"names":["React","ButtonType","ButtonTextType","Button","text","buttonType","textType","children","onPress","handleOnClick","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkC,OAAlC;AACA,OAAO,cAAP,C,CAEA;;;AACA,WAAYC,UAAZ,C,CAOA;;WAPYA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;AAAAA,EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U;;AAQZ,WAAYC,cAAZ;;WAAYA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;AAAAA,EAAAA,c,CAAAA,c;GAAAA,c,KAAAA,c;;AAcZ,MAAMC,MAA6B,GAAG,QAMhC;AAAA,MANiC;AACrCC,IAAAA,IADqC;AAErCC,IAAAA,UAFqC;AAGrCC,IAAAA,QAHqC;AAIrCC,IAAAA,QAJqC;AAKrCC,IAAAA,OAAO,GAAG,MAAM,CAAE;AALmB,GAMjC;;AACJ,QAAMC,aAAa,GAAIC,CAAD,IAAsC;AAC1DF,IAAAA,OAAO,CAACE,CAAD,CAAP;AACD,GAFD;;AAGA,sBACE;AAAQ,IAAA,OAAO,EAAED,aAAjB;AAAgC,IAAA,EAAE,EAAEJ,UAApC;AAAA,2BACE;AAAG,MAAA,EAAE,EAAEC,QAAP;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjBD;;KAAMD,M;AAmBN,eAAeA,MAAf","sourcesContent":["import React, { MouseEvent } from \"react\";\nimport \"./button.css\";\n\n// HINT: Use this in ButtonProps to determine how the button is styled\nexport enum ButtonType {\n  \"button-green\",\n  \"button-white\",\n  \"button-clear\",\n  \"button-clearAlt\",\n}\n\n// HINT: Use this in ButtonProps to determine how the button text is styled\nexport enum ButtonTextType {\n  \"button-text-white\",\n  \"button-text-green\",\n  \"button-text-grey\",\n}\n\ninterface ButtonProps {\n  text: string;\n  buttonType: string;\n  textType: string;\n  children?: React.ReactNode;\n  onPress: ((event: React.MouseEvent<HTMLButtonElement>) => void);\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  text,\n  buttonType,\n  textType,\n  children,\n  onPress = () => {},\n}) => {\n  const handleOnClick = (e: MouseEvent<HTMLButtonElement>) => {\n    onPress(e);\n  };\n  return (\n    <button onClick={handleOnClick} id={buttonType}>\n      <p id={textType}>\n        {text}\n      </p>\n    </button>\n  );\n};\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}